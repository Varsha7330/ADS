import java.util.Arrays;
import java.util.Scanner;

public class QuickSort {

    // Method to perform QuickSort
    public static void quickSort(int[] array, int low, int high) {
        if (low < high) {
            // Find the pivot index
            int pivotIndex = partition(array, low, high);

            // Recursively sort elements before and after the pivot
            quickSort(array, low, pivotIndex - 1);
            quickSort(array, pivotIndex + 1, high);
        }
    }

    // Method to partition the array
    public static int partition(int[] array, int low, int high) {
        int pivot = array[high]; // Choosing the last element as the pivot
        int i = low - 1; // Index for smaller elements

        for (int j = low; j < high; j++) {
            if (array[j] <= pivot) {
                i++;
                // Swap elements
                swap(array, i, j);
            }
        }

        // Place the pivot in its correct position
        swap(array, i + 1, high);
        return i + 1;
    }

    // Method to swap two elements in the array
    public static void swap(int[] array, int i, int j) {
        int temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }

    // Main method to test the QuickSort algorithm
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Accept the size of the array
        System.out.print("Enter the number of elements in the array: ");
        int n = scanner.nextInt();

        // Create and populate the array dynamically
        int[] array = new int[n];
        System.out.println("Enter the elements of the array:");
        for (int i = 0; i < n; i++) {
            array[i] = scanner.nextInt();
        }

        System.out.println("Original array:");
        System.out.println(Arrays.toString(array));

        // Measure execution time
        long startTime = System.nanoTime(); // Start time
        quickSort(array, 0, array.length - 1);
        long endTime = System.nanoTime(); // End time

        System.out.println("Sorted array:");
        System.out.println(Arrays.toString(array));

        // Calculate and display execution time
        long executionTime = endTime - startTime;
        System.out.println("Execution time: " + executionTime + " nanoseconds");

        scanner.close();
    }
}

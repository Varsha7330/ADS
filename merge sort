# ADS
#merge sort
import java.util.Scanner;

public class Main {
    public static void mergesort(int[] a, int low, int high) {
        if (low < high) {
            int mid = (low + high) / 2;
            mergesort(a, low, mid);
            mergesort(a, mid + 1, high);
            merge(a, low, mid, high);
        }
    }

    public static void merge(int[] a, int low, int mid, int high) {
        int i = low, j = mid + 1, k = 0;
        int[] b = new int[high - low + 1];

        // Merging both halves into the temporary array b
        while (i <= mid && j <= high) {
            if (a[i] <= a[j]) {
                b[k++] = a[i++];
            } else {
                b[k++] = a[j++];
            }
        }

        // Copying remaining elements of the left half
        while (i <= mid) {
            b[k++] = a[i++];
        }

        // Copying remaining elements of the right half
        while (j <= high) {
            b[k++] = a[j++];
        }

        // Copying the sorted elements back to the original array
        for (k = 0; k < b.length; k++) {
            a[low + k] = b[k];
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter size of array: ");
        int n = sc.nextInt();
        int[] arr = new int[n];

        System.out.println("Enter elements of the array:");
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }

        System.out.println("Original array:");
        for (int num : arr) {
            System.out.print(num + " ");
        }

        long starttime = System.nanoTime();
        mergesort(arr, 0, n - 1);
        long endtime = System.nanoTime();

        System.out.println("\nSorted array:");
        for (int num : arr) {
            System.out.print(num + " ");
        }

        long executiontime = endtime - starttime;
        System.out.println("\nExecution time in nanoseconds: " + executiontime);

        sc.close();
    }
}
